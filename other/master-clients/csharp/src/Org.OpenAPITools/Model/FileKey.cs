/*
 * Seaweedfs Master Server API
 *
 * The Seaweedfs Master Server API allows you to store blobs
 *
 * The version of the OpenAPI document: 3.43.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FileKey
    /// </summary>
    [DataContract]
    public partial class FileKey :  IEquatable<FileKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileKey" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="fid">fid.</param>
        /// <param name="url">url.</param>
        public FileKey(Object count = default(Object), Object fid = default(Object), Object url = default(Object))
        {
            this.Count = count;
            this.Fid = fid;
            this.Url = url;
            this.Count = count;
            this.Fid = fid;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=true)]
        public Object Count { get; set; }

        /// <summary>
        /// Gets or Sets Fid
        /// </summary>
        [DataMember(Name="fid", EmitDefaultValue=true)]
        public Object Fid { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public Object Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileKey {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Fid: ").Append(Fid).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileKey);
        }

        /// <summary>
        /// Returns true if FileKey instances are equal
        /// </summary>
        /// <param name="input">Instance of FileKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileKey input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Fid == input.Fid ||
                    (this.Fid != null &&
                    this.Fid.Equals(input.Fid))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Fid != null)
                    hashCode = hashCode * 59 + this.Fid.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
