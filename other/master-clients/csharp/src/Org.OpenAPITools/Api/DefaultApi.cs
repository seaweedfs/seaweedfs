/*
 * Seaweedfs Master Server API
 *
 * The Seaweedfs Master Server API allows you to store blobs
 *
 * The version of the OpenAPI document: 3.43.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign a file key
        /// </summary>
        /// <remarks>
        /// This operation is very cheap. Just increase a number in master server's memory.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2 (optional)</param>
        /// <param name="collection">required collection name (optional)</param>
        /// <param name="dataCenter">preferred data center (optional)</param>
        /// <param name="rack">preferred rack (optional)</param>
        /// <param name="dataNode">preferred volume server, e.g. 127.0.0.1:8080 (optional)</param>
        /// <param name="disk">If you have disks labelled, this must be supplied to specify the disk type to allocate on. (optional)</param>
        /// <param name="replication">replica placement strategy (optional)</param>
        /// <param name="ttl">file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year (optional)</param>
        /// <param name="preallocate">If no matching volumes, pre-allocate this number of bytes on disk for new volumes. (optional)</param>
        /// <param name="memoryMapMaxSizeMb">Only implemented for windows. Use memory mapped files with specified size for new volumes. (optional)</param>
        /// <param name="writableVolumeCount">If no matching volumes, create specified number of new volumes. (optional)</param>
        /// <returns>FileKey</returns>
        FileKey DirAssign (Object count = default(Object), Object collection = default(Object), Object dataCenter = default(Object), Object rack = default(Object), Object dataNode = default(Object), Object disk = default(Object), Object replication = default(Object), Object ttl = default(Object), Object preallocate = default(Object), Object memoryMapMaxSizeMb = default(Object), Object writableVolumeCount = default(Object));

        /// <summary>
        /// Assign a file key
        /// </summary>
        /// <remarks>
        /// This operation is very cheap. Just increase a number in master server's memory.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2 (optional)</param>
        /// <param name="collection">required collection name (optional)</param>
        /// <param name="dataCenter">preferred data center (optional)</param>
        /// <param name="rack">preferred rack (optional)</param>
        /// <param name="dataNode">preferred volume server, e.g. 127.0.0.1:8080 (optional)</param>
        /// <param name="disk">If you have disks labelled, this must be supplied to specify the disk type to allocate on. (optional)</param>
        /// <param name="replication">replica placement strategy (optional)</param>
        /// <param name="ttl">file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year (optional)</param>
        /// <param name="preallocate">If no matching volumes, pre-allocate this number of bytes on disk for new volumes. (optional)</param>
        /// <param name="memoryMapMaxSizeMb">Only implemented for windows. Use memory mapped files with specified size for new volumes. (optional)</param>
        /// <param name="writableVolumeCount">If no matching volumes, create specified number of new volumes. (optional)</param>
        /// <returns>ApiResponse of FileKey</returns>
        ApiResponse<FileKey> DirAssignWithHttpInfo (Object count = default(Object), Object collection = default(Object), Object dataCenter = default(Object), Object rack = default(Object), Object dataNode = default(Object), Object disk = default(Object), Object replication = default(Object), Object ttl = default(Object), Object preallocate = default(Object), Object memoryMapMaxSizeMb = default(Object), Object writableVolumeCount = default(Object));
        /// <summary>
        /// Lookup volume
        /// </summary>
        /// <remarks>
        /// We would need to find out whether the volumes have moved.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">volume id (optional)</param>
        /// <param name="collection">optionally to speed up the lookup (optional)</param>
        /// <param name="fileId">If provided, this returns the fileId location and a JWT to update or delete the file. (optional)</param>
        /// <param name="read">works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads. (optional)</param>
        /// <returns>Object</returns>
        Object DirLookup (Object volumeId = default(Object), Object collection = default(Object), Object fileId = default(Object), Object read = default(Object));

        /// <summary>
        /// Lookup volume
        /// </summary>
        /// <remarks>
        /// We would need to find out whether the volumes have moved.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">volume id (optional)</param>
        /// <param name="collection">optionally to speed up the lookup (optional)</param>
        /// <param name="fileId">If provided, this returns the fileId location and a JWT to update or delete the file. (optional)</param>
        /// <param name="read">works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DirLookupWithHttpInfo (Object volumeId = default(Object), Object collection = default(Object), Object fileId = default(Object), Object read = default(Object));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign a file key
        /// </summary>
        /// <remarks>
        /// This operation is very cheap. Just increase a number in master server's memory.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2 (optional)</param>
        /// <param name="collection">required collection name (optional)</param>
        /// <param name="dataCenter">preferred data center (optional)</param>
        /// <param name="rack">preferred rack (optional)</param>
        /// <param name="dataNode">preferred volume server, e.g. 127.0.0.1:8080 (optional)</param>
        /// <param name="disk">If you have disks labelled, this must be supplied to specify the disk type to allocate on. (optional)</param>
        /// <param name="replication">replica placement strategy (optional)</param>
        /// <param name="ttl">file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year (optional)</param>
        /// <param name="preallocate">If no matching volumes, pre-allocate this number of bytes on disk for new volumes. (optional)</param>
        /// <param name="memoryMapMaxSizeMb">Only implemented for windows. Use memory mapped files with specified size for new volumes. (optional)</param>
        /// <param name="writableVolumeCount">If no matching volumes, create specified number of new volumes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FileKey</returns>
        System.Threading.Tasks.Task<FileKey> DirAssignAsync (Object count = default(Object), Object collection = default(Object), Object dataCenter = default(Object), Object rack = default(Object), Object dataNode = default(Object), Object disk = default(Object), Object replication = default(Object), Object ttl = default(Object), Object preallocate = default(Object), Object memoryMapMaxSizeMb = default(Object), Object writableVolumeCount = default(Object), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign a file key
        /// </summary>
        /// <remarks>
        /// This operation is very cheap. Just increase a number in master server's memory.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2 (optional)</param>
        /// <param name="collection">required collection name (optional)</param>
        /// <param name="dataCenter">preferred data center (optional)</param>
        /// <param name="rack">preferred rack (optional)</param>
        /// <param name="dataNode">preferred volume server, e.g. 127.0.0.1:8080 (optional)</param>
        /// <param name="disk">If you have disks labelled, this must be supplied to specify the disk type to allocate on. (optional)</param>
        /// <param name="replication">replica placement strategy (optional)</param>
        /// <param name="ttl">file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year (optional)</param>
        /// <param name="preallocate">If no matching volumes, pre-allocate this number of bytes on disk for new volumes. (optional)</param>
        /// <param name="memoryMapMaxSizeMb">Only implemented for windows. Use memory mapped files with specified size for new volumes. (optional)</param>
        /// <param name="writableVolumeCount">If no matching volumes, create specified number of new volumes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FileKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileKey>> DirAssignWithHttpInfoAsync (Object count = default(Object), Object collection = default(Object), Object dataCenter = default(Object), Object rack = default(Object), Object dataNode = default(Object), Object disk = default(Object), Object replication = default(Object), Object ttl = default(Object), Object preallocate = default(Object), Object memoryMapMaxSizeMb = default(Object), Object writableVolumeCount = default(Object), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lookup volume
        /// </summary>
        /// <remarks>
        /// We would need to find out whether the volumes have moved.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">volume id (optional)</param>
        /// <param name="collection">optionally to speed up the lookup (optional)</param>
        /// <param name="fileId">If provided, this returns the fileId location and a JWT to update or delete the file. (optional)</param>
        /// <param name="read">works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DirLookupAsync (Object volumeId = default(Object), Object collection = default(Object), Object fileId = default(Object), Object read = default(Object), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lookup volume
        /// </summary>
        /// <remarks>
        /// We would need to find out whether the volumes have moved.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">volume id (optional)</param>
        /// <param name="collection">optionally to speed up the lookup (optional)</param>
        /// <param name="fileId">If provided, this returns the fileId location and a JWT to update or delete the file. (optional)</param>
        /// <param name="read">works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DirLookupWithHttpInfoAsync (Object volumeId = default(Object), Object collection = default(Object), Object fileId = default(Object), Object read = default(Object), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign a file key This operation is very cheap. Just increase a number in master server's memory.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2 (optional)</param>
        /// <param name="collection">required collection name (optional)</param>
        /// <param name="dataCenter">preferred data center (optional)</param>
        /// <param name="rack">preferred rack (optional)</param>
        /// <param name="dataNode">preferred volume server, e.g. 127.0.0.1:8080 (optional)</param>
        /// <param name="disk">If you have disks labelled, this must be supplied to specify the disk type to allocate on. (optional)</param>
        /// <param name="replication">replica placement strategy (optional)</param>
        /// <param name="ttl">file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year (optional)</param>
        /// <param name="preallocate">If no matching volumes, pre-allocate this number of bytes on disk for new volumes. (optional)</param>
        /// <param name="memoryMapMaxSizeMb">Only implemented for windows. Use memory mapped files with specified size for new volumes. (optional)</param>
        /// <param name="writableVolumeCount">If no matching volumes, create specified number of new volumes. (optional)</param>
        /// <returns>FileKey</returns>
        public FileKey DirAssign (Object count = default(Object), Object collection = default(Object), Object dataCenter = default(Object), Object rack = default(Object), Object dataNode = default(Object), Object disk = default(Object), Object replication = default(Object), Object ttl = default(Object), Object preallocate = default(Object), Object memoryMapMaxSizeMb = default(Object), Object writableVolumeCount = default(Object))
        {
             ApiResponse<FileKey> localVarResponse = DirAssignWithHttpInfo(count, collection, dataCenter, rack, dataNode, disk, replication, ttl, preallocate, memoryMapMaxSizeMb, writableVolumeCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a file key This operation is very cheap. Just increase a number in master server's memory.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2 (optional)</param>
        /// <param name="collection">required collection name (optional)</param>
        /// <param name="dataCenter">preferred data center (optional)</param>
        /// <param name="rack">preferred rack (optional)</param>
        /// <param name="dataNode">preferred volume server, e.g. 127.0.0.1:8080 (optional)</param>
        /// <param name="disk">If you have disks labelled, this must be supplied to specify the disk type to allocate on. (optional)</param>
        /// <param name="replication">replica placement strategy (optional)</param>
        /// <param name="ttl">file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year (optional)</param>
        /// <param name="preallocate">If no matching volumes, pre-allocate this number of bytes on disk for new volumes. (optional)</param>
        /// <param name="memoryMapMaxSizeMb">Only implemented for windows. Use memory mapped files with specified size for new volumes. (optional)</param>
        /// <param name="writableVolumeCount">If no matching volumes, create specified number of new volumes. (optional)</param>
        /// <returns>ApiResponse of FileKey</returns>
        public ApiResponse<FileKey> DirAssignWithHttpInfo (Object count = default(Object), Object collection = default(Object), Object dataCenter = default(Object), Object rack = default(Object), Object dataNode = default(Object), Object disk = default(Object), Object replication = default(Object), Object ttl = default(Object), Object preallocate = default(Object), Object memoryMapMaxSizeMb = default(Object), Object writableVolumeCount = default(Object))
        {

            var localVarPath = "/dir/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (collection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collection", collection)); // query parameter
            if (dataCenter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataCenter", dataCenter)); // query parameter
            if (rack != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rack", rack)); // query parameter
            if (dataNode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataNode", dataNode)); // query parameter
            if (disk != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disk", disk)); // query parameter
            if (replication != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "replication", replication)); // query parameter
            if (ttl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ttl", ttl)); // query parameter
            if (preallocate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preallocate", preallocate)); // query parameter
            if (memoryMapMaxSizeMb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "memoryMapMaxSizeMb", memoryMapMaxSizeMb)); // query parameter
            if (writableVolumeCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "writableVolumeCount", writableVolumeCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileKey)));
        }

        /// <summary>
        /// Assign a file key This operation is very cheap. Just increase a number in master server's memory.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2 (optional)</param>
        /// <param name="collection">required collection name (optional)</param>
        /// <param name="dataCenter">preferred data center (optional)</param>
        /// <param name="rack">preferred rack (optional)</param>
        /// <param name="dataNode">preferred volume server, e.g. 127.0.0.1:8080 (optional)</param>
        /// <param name="disk">If you have disks labelled, this must be supplied to specify the disk type to allocate on. (optional)</param>
        /// <param name="replication">replica placement strategy (optional)</param>
        /// <param name="ttl">file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year (optional)</param>
        /// <param name="preallocate">If no matching volumes, pre-allocate this number of bytes on disk for new volumes. (optional)</param>
        /// <param name="memoryMapMaxSizeMb">Only implemented for windows. Use memory mapped files with specified size for new volumes. (optional)</param>
        /// <param name="writableVolumeCount">If no matching volumes, create specified number of new volumes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FileKey</returns>
        public async System.Threading.Tasks.Task<FileKey> DirAssignAsync (Object count = default(Object), Object collection = default(Object), Object dataCenter = default(Object), Object rack = default(Object), Object dataNode = default(Object), Object disk = default(Object), Object replication = default(Object), Object ttl = default(Object), Object preallocate = default(Object), Object memoryMapMaxSizeMb = default(Object), Object writableVolumeCount = default(Object), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FileKey> localVarResponse = await DirAssignWithHttpInfoAsync(count, collection, dataCenter, rack, dataNode, disk, replication, ttl, preallocate, memoryMapMaxSizeMb, writableVolumeCount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign a file key This operation is very cheap. Just increase a number in master server's memory.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2 (optional)</param>
        /// <param name="collection">required collection name (optional)</param>
        /// <param name="dataCenter">preferred data center (optional)</param>
        /// <param name="rack">preferred rack (optional)</param>
        /// <param name="dataNode">preferred volume server, e.g. 127.0.0.1:8080 (optional)</param>
        /// <param name="disk">If you have disks labelled, this must be supplied to specify the disk type to allocate on. (optional)</param>
        /// <param name="replication">replica placement strategy (optional)</param>
        /// <param name="ttl">file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year (optional)</param>
        /// <param name="preallocate">If no matching volumes, pre-allocate this number of bytes on disk for new volumes. (optional)</param>
        /// <param name="memoryMapMaxSizeMb">Only implemented for windows. Use memory mapped files with specified size for new volumes. (optional)</param>
        /// <param name="writableVolumeCount">If no matching volumes, create specified number of new volumes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FileKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileKey>> DirAssignWithHttpInfoAsync (Object count = default(Object), Object collection = default(Object), Object dataCenter = default(Object), Object rack = default(Object), Object dataNode = default(Object), Object disk = default(Object), Object replication = default(Object), Object ttl = default(Object), Object preallocate = default(Object), Object memoryMapMaxSizeMb = default(Object), Object writableVolumeCount = default(Object), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dir/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (collection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collection", collection)); // query parameter
            if (dataCenter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataCenter", dataCenter)); // query parameter
            if (rack != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rack", rack)); // query parameter
            if (dataNode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataNode", dataNode)); // query parameter
            if (disk != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disk", disk)); // query parameter
            if (replication != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "replication", replication)); // query parameter
            if (ttl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ttl", ttl)); // query parameter
            if (preallocate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preallocate", preallocate)); // query parameter
            if (memoryMapMaxSizeMb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "memoryMapMaxSizeMb", memoryMapMaxSizeMb)); // query parameter
            if (writableVolumeCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "writableVolumeCount", writableVolumeCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileKey)));
        }

        /// <summary>
        /// Lookup volume We would need to find out whether the volumes have moved.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">volume id (optional)</param>
        /// <param name="collection">optionally to speed up the lookup (optional)</param>
        /// <param name="fileId">If provided, this returns the fileId location and a JWT to update or delete the file. (optional)</param>
        /// <param name="read">works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads. (optional)</param>
        /// <returns>Object</returns>
        public Object DirLookup (Object volumeId = default(Object), Object collection = default(Object), Object fileId = default(Object), Object read = default(Object))
        {
             ApiResponse<Object> localVarResponse = DirLookupWithHttpInfo(volumeId, collection, fileId, read);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup volume We would need to find out whether the volumes have moved.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">volume id (optional)</param>
        /// <param name="collection">optionally to speed up the lookup (optional)</param>
        /// <param name="fileId">If provided, this returns the fileId location and a JWT to update or delete the file. (optional)</param>
        /// <param name="read">works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DirLookupWithHttpInfo (Object volumeId = default(Object), Object collection = default(Object), Object fileId = default(Object), Object read = default(Object))
        {

            var localVarPath = "/dir/lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (volumeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "volumeId", volumeId)); // query parameter
            if (collection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collection", collection)); // query parameter
            if (fileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fileId", fileId)); // query parameter
            if (read != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read", read)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Lookup volume We would need to find out whether the volumes have moved.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">volume id (optional)</param>
        /// <param name="collection">optionally to speed up the lookup (optional)</param>
        /// <param name="fileId">If provided, this returns the fileId location and a JWT to update or delete the file. (optional)</param>
        /// <param name="read">works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DirLookupAsync (Object volumeId = default(Object), Object collection = default(Object), Object fileId = default(Object), Object read = default(Object), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DirLookupWithHttpInfoAsync(volumeId, collection, fileId, read, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lookup volume We would need to find out whether the volumes have moved.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">volume id (optional)</param>
        /// <param name="collection">optionally to speed up the lookup (optional)</param>
        /// <param name="fileId">If provided, this returns the fileId location and a JWT to update or delete the file. (optional)</param>
        /// <param name="read">works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DirLookupWithHttpInfoAsync (Object volumeId = default(Object), Object collection = default(Object), Object fileId = default(Object), Object read = default(Object), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dir/lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (volumeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "volumeId", volumeId)); // query parameter
            if (collection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collection", collection)); // query parameter
            if (fileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fileId", fileId)); // query parameter
            if (read != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read", read)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
