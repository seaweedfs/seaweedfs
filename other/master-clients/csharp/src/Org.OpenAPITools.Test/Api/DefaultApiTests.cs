/*
 * Seaweedfs Master Server API
 *
 * The Seaweedfs Master Server API allows you to store blobs
 *
 * The version of the OpenAPI document: 3.43.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DefaultApi
            //Assert.IsInstanceOf(typeof(DefaultApi), instance);
        }

        
        /// <summary>
        /// Test DirAssign
        /// </summary>
        [Test]
        public void DirAssignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object count = null;
            //Object collection = null;
            //Object dataCenter = null;
            //Object rack = null;
            //Object dataNode = null;
            //Object disk = null;
            //Object replication = null;
            //Object ttl = null;
            //Object preallocate = null;
            //Object memoryMapMaxSizeMb = null;
            //Object writableVolumeCount = null;
            //var response = instance.DirAssign(count, collection, dataCenter, rack, dataNode, disk, replication, ttl, preallocate, memoryMapMaxSizeMb, writableVolumeCount);
            //Assert.IsInstanceOf(typeof(FileKey), response, "response is FileKey");
        }
        
        /// <summary>
        /// Test DirLookup
        /// </summary>
        [Test]
        public void DirLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object volumeId = null;
            //Object collection = null;
            //Object fileId = null;
            //Object read = null;
            //var response = instance.DirLookup(volumeId, collection, fileId, read);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
    }

}
