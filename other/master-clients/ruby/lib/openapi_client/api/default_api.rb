=begin
#Seaweedfs Master Server API

#The Seaweedfs Master Server API allows you to store blobs

The version of the OpenAPI document: 3.43.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign a file key
    # This operation is very cheap. Just increase a number in master server's memory.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :count how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2
    # @option opts [Object] :collection required collection name
    # @option opts [Object] :data_center preferred data center
    # @option opts [Object] :rack preferred rack
    # @option opts [Object] :data_node preferred volume server, e.g. 127.0.0.1:8080
    # @option opts [Object] :disk If you have disks labelled, this must be supplied to specify the disk type to allocate on.
    # @option opts [Object] :replication replica placement strategy
    # @option opts [Object] :ttl file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year
    # @option opts [Object] :preallocate If no matching volumes, pre-allocate this number of bytes on disk for new volumes.
    # @option opts [Object] :memory_map_max_size_mb Only implemented for windows. Use memory mapped files with specified size for new volumes.
    # @option opts [Object] :writable_volume_count If no matching volumes, create specified number of new volumes.
    # @return [FileKey]
    def dir_assign(opts = {})
      data, _status_code, _headers = dir_assign_with_http_info(opts)
      data
    end

    # Assign a file key
    # This operation is very cheap. Just increase a number in master server&#39;s memory.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :count how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2
    # @option opts [Object] :collection required collection name
    # @option opts [Object] :data_center preferred data center
    # @option opts [Object] :rack preferred rack
    # @option opts [Object] :data_node preferred volume server, e.g. 127.0.0.1:8080
    # @option opts [Object] :disk If you have disks labelled, this must be supplied to specify the disk type to allocate on.
    # @option opts [Object] :replication replica placement strategy
    # @option opts [Object] :ttl file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year
    # @option opts [Object] :preallocate If no matching volumes, pre-allocate this number of bytes on disk for new volumes.
    # @option opts [Object] :memory_map_max_size_mb Only implemented for windows. Use memory mapped files with specified size for new volumes.
    # @option opts [Object] :writable_volume_count If no matching volumes, create specified number of new volumes.
    # @return [Array<(FileKey, Integer, Hash)>] FileKey data, response status code and response headers
    def dir_assign_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.dir_assign ...'
      end
      # resource path
      local_var_path = '/dir/assign'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'collection'] = opts[:'collection'] if !opts[:'collection'].nil?
      query_params[:'dataCenter'] = opts[:'data_center'] if !opts[:'data_center'].nil?
      query_params[:'rack'] = opts[:'rack'] if !opts[:'rack'].nil?
      query_params[:'dataNode'] = opts[:'data_node'] if !opts[:'data_node'].nil?
      query_params[:'disk'] = opts[:'disk'] if !opts[:'disk'].nil?
      query_params[:'replication'] = opts[:'replication'] if !opts[:'replication'].nil?
      query_params[:'ttl'] = opts[:'ttl'] if !opts[:'ttl'].nil?
      query_params[:'preallocate'] = opts[:'preallocate'] if !opts[:'preallocate'].nil?
      query_params[:'memoryMapMaxSizeMb'] = opts[:'memory_map_max_size_mb'] if !opts[:'memory_map_max_size_mb'].nil?
      query_params[:'writableVolumeCount'] = opts[:'writable_volume_count'] if !opts[:'writable_volume_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FileKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.dir_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#dir_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lookup volume
    # We would need to find out whether the volumes have moved.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :volume_id volume id
    # @option opts [Object] :collection optionally to speed up the lookup
    # @option opts [Object] :file_id If provided, this returns the fileId location and a JWT to update or delete the file.
    # @option opts [Object] :read works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads.
    # @return [Object]
    def dir_lookup(opts = {})
      data, _status_code, _headers = dir_lookup_with_http_info(opts)
      data
    end

    # Lookup volume
    # We would need to find out whether the volumes have moved.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :volume_id volume id
    # @option opts [Object] :collection optionally to speed up the lookup
    # @option opts [Object] :file_id If provided, this returns the fileId location and a JWT to update or delete the file.
    # @option opts [Object] :read works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def dir_lookup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.dir_lookup ...'
      end
      # resource path
      local_var_path = '/dir/lookup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'volumeId'] = opts[:'volume_id'] if !opts[:'volume_id'].nil?
      query_params[:'collection'] = opts[:'collection'] if !opts[:'collection'].nil?
      query_params[:'fileId'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'read'] = opts[:'read'] if !opts[:'read'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.dir_lookup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#dir_lookup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
