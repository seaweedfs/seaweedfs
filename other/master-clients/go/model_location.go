/*
Seaweedfs Master Server API

The Seaweedfs Master Server API allows you to store blobs

API version: 3.43.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Location type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Location{}

// Location struct for Location
type Location struct {
	PublicUrl interface{} `json:"publicUrl,omitempty"`
	Url       interface{} `json:"url,omitempty"`
}

// NewLocation instantiates a new Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocation() *Location {
	this := Location{}
	return &this
}

// NewLocationWithDefaults instantiates a new Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWithDefaults() *Location {
	this := Location{}
	return &this
}

// GetPublicUrl returns the PublicUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Location) GetPublicUrl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PublicUrl
}

// GetPublicUrlOk returns a tuple with the PublicUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Location) GetPublicUrlOk() (*interface{}, bool) {
	if o == nil || IsNil(o.PublicUrl) {
		return nil, false
	}
	return &o.PublicUrl, true
}

// HasPublicUrl returns a boolean if a field has been set.
func (o *Location) HasPublicUrl() bool {
	if o != nil && IsNil(o.PublicUrl) {
		return true
	}

	return false
}

// SetPublicUrl gets a reference to the given interface{} and assigns it to the PublicUrl field.
func (o *Location) SetPublicUrl(v interface{}) {
	o.PublicUrl = v
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Location) GetUrl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Location) GetUrlOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return &o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Location) HasUrl() bool {
	if o != nil && IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given interface{} and assigns it to the Url field.
func (o *Location) SetUrl(v interface{}) {
	o.Url = v
}

func (o Location) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Location) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PublicUrl != nil {
		toSerialize["publicUrl"] = o.PublicUrl
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableLocation struct {
	value *Location
	isSet bool
}

func (v NullableLocation) Get() *Location {
	return v.value
}

func (v *NullableLocation) Set(val *Location) {
	v.value = val
	v.isSet = true
}

func (v NullableLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocation(val *Location) *NullableLocation {
	return &NullableLocation{value: val, isSet: true}
}

func (v NullableLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
