/*
Seaweedfs Master Server API

The Seaweedfs Master Server API allows you to store blobs

API version: 3.43.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FileKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileKey{}

// FileKey struct for FileKey
type FileKey struct {
	Count interface{} `json:"count,omitempty"`
	Fid   interface{} `json:"fid,omitempty"`
	Url   interface{} `json:"url,omitempty"`
}

// NewFileKey instantiates a new FileKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileKey() *FileKey {
	this := FileKey{}
	return &this
}

// NewFileKeyWithDefaults instantiates a new FileKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileKeyWithDefaults() *FileKey {
	this := FileKey{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileKey) GetCount() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileKey) GetCountOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return &o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *FileKey) HasCount() bool {
	if o != nil && IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given interface{} and assigns it to the Count field.
func (o *FileKey) SetCount(v interface{}) {
	o.Count = v
}

// GetFid returns the Fid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileKey) GetFid() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Fid
}

// GetFidOk returns a tuple with the Fid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileKey) GetFidOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Fid) {
		return nil, false
	}
	return &o.Fid, true
}

// HasFid returns a boolean if a field has been set.
func (o *FileKey) HasFid() bool {
	if o != nil && IsNil(o.Fid) {
		return true
	}

	return false
}

// SetFid gets a reference to the given interface{} and assigns it to the Fid field.
func (o *FileKey) SetFid(v interface{}) {
	o.Fid = v
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileKey) GetUrl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileKey) GetUrlOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return &o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FileKey) HasUrl() bool {
	if o != nil && IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given interface{} and assigns it to the Url field.
func (o *FileKey) SetUrl(v interface{}) {
	o.Url = v
}

func (o FileKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Fid != nil {
		toSerialize["fid"] = o.Fid
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableFileKey struct {
	value *FileKey
	isSet bool
}

func (v NullableFileKey) Get() *FileKey {
	return v.value
}

func (v *NullableFileKey) Set(val *FileKey) {
	v.value = val
	v.isSet = true
}

func (v NullableFileKey) IsSet() bool {
	return v.isSet
}

func (v *NullableFileKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileKey(val *FileKey) *NullableFileKey {
	return &NullableFileKey{value: val, isSet: true}
}

func (v NullableFileKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
