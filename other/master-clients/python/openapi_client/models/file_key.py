# coding: utf-8

"""
    Seaweedfs Master Server API

    The Seaweedfs Master Server API allows you to store blobs  # noqa: E501

    The version of the OpenAPI document: 3.43.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel

class FileKey(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    count: Optional[Any] = None
    fid: Optional[Any] = None
    url: Optional[Any] = None
    __properties = ["count", "fid", "url"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FileKey:
        """Create an instance of FileKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if count (nullable) is None
        if self.count is None:
            _dict['count'] = None

        # set to None if fid (nullable) is None
        if self.fid is None:
            _dict['fid'] = None

        # set to None if url (nullable) is None
        if self.url is None:
            _dict['url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FileKey:
        """Create an instance of FileKey from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return FileKey.parse_obj(obj)

        _obj = FileKey.parse_obj({
            "count": obj.get("count"),
            "fid": obj.get("fid"),
            "url": obj.get("url")
        })
        return _obj

