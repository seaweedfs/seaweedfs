# coding: utf-8

"""
    Seaweedfs Master Server API

    The Seaweedfs Master Server API allows you to store blobs  # noqa: E501

    The version of the OpenAPI document: 3.43.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field

from typing import Any, Optional

from openapi_client.models.file_key import FileKey

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def dir_assign(self, count : Annotated[Optional[Any], Field(description="how many file ids to assign. Use <fid>_1, <fid>_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2")] = None, collection : Annotated[Optional[Any], Field(description="required collection name")] = None, data_center : Annotated[Optional[Any], Field(description="preferred data center")] = None, rack : Annotated[Optional[Any], Field(description="preferred rack")] = None, data_node : Annotated[Optional[Any], Field(description="preferred volume server, e.g. 127.0.0.1:8080")] = None, disk : Annotated[Optional[Any], Field(description="If you have disks labelled, this must be supplied to specify the disk type to allocate on.")] = None, replication : Annotated[Optional[Any], Field(description="replica placement strategy")] = None, ttl : Annotated[Optional[Any], Field(description="file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year")] = None, preallocate : Annotated[Optional[Any], Field(description="If no matching volumes, pre-allocate this number of bytes on disk for new volumes.")] = None, memory_map_max_size_mb : Annotated[Optional[Any], Field(description="Only implemented for windows. Use memory mapped files with specified size for new volumes.")] = None, writable_volume_count : Annotated[Optional[Any], Field(description="If no matching volumes, create specified number of new volumes.")] = None, **kwargs) -> FileKey:  # noqa: E501
        """Assign a file key  # noqa: E501

        This operation is very cheap. Just increase a number in master server's memory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dir_assign(count, collection, data_center, rack, data_node, disk, replication, ttl, preallocate, memory_map_max_size_mb, writable_volume_count, async_req=True)
        >>> result = thread.get()

        :param count: how many file ids to assign. Use <fid>_1, <fid>_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2
        :type count: object
        :param collection: required collection name
        :type collection: object
        :param data_center: preferred data center
        :type data_center: object
        :param rack: preferred rack
        :type rack: object
        :param data_node: preferred volume server, e.g. 127.0.0.1:8080
        :type data_node: object
        :param disk: If you have disks labelled, this must be supplied to specify the disk type to allocate on.
        :type disk: object
        :param replication: replica placement strategy
        :type replication: object
        :param ttl: file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year
        :type ttl: object
        :param preallocate: If no matching volumes, pre-allocate this number of bytes on disk for new volumes.
        :type preallocate: object
        :param memory_map_max_size_mb: Only implemented for windows. Use memory mapped files with specified size for new volumes.
        :type memory_map_max_size_mb: object
        :param writable_volume_count: If no matching volumes, create specified number of new volumes.
        :type writable_volume_count: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FileKey
        """
        kwargs['_return_http_data_only'] = True
        return self.dir_assign_with_http_info(count, collection, data_center, rack, data_node, disk, replication, ttl, preallocate, memory_map_max_size_mb, writable_volume_count, **kwargs)  # noqa: E501

    @validate_arguments
    def dir_assign_with_http_info(self, count : Annotated[Optional[Any], Field(description="how many file ids to assign. Use <fid>_1, <fid>_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2")] = None, collection : Annotated[Optional[Any], Field(description="required collection name")] = None, data_center : Annotated[Optional[Any], Field(description="preferred data center")] = None, rack : Annotated[Optional[Any], Field(description="preferred rack")] = None, data_node : Annotated[Optional[Any], Field(description="preferred volume server, e.g. 127.0.0.1:8080")] = None, disk : Annotated[Optional[Any], Field(description="If you have disks labelled, this must be supplied to specify the disk type to allocate on.")] = None, replication : Annotated[Optional[Any], Field(description="replica placement strategy")] = None, ttl : Annotated[Optional[Any], Field(description="file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year")] = None, preallocate : Annotated[Optional[Any], Field(description="If no matching volumes, pre-allocate this number of bytes on disk for new volumes.")] = None, memory_map_max_size_mb : Annotated[Optional[Any], Field(description="Only implemented for windows. Use memory mapped files with specified size for new volumes.")] = None, writable_volume_count : Annotated[Optional[Any], Field(description="If no matching volumes, create specified number of new volumes.")] = None, **kwargs):  # noqa: E501
        """Assign a file key  # noqa: E501

        This operation is very cheap. Just increase a number in master server's memory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dir_assign_with_http_info(count, collection, data_center, rack, data_node, disk, replication, ttl, preallocate, memory_map_max_size_mb, writable_volume_count, async_req=True)
        >>> result = thread.get()

        :param count: how many file ids to assign. Use <fid>_1, <fid>_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2
        :type count: object
        :param collection: required collection name
        :type collection: object
        :param data_center: preferred data center
        :type data_center: object
        :param rack: preferred rack
        :type rack: object
        :param data_node: preferred volume server, e.g. 127.0.0.1:8080
        :type data_node: object
        :param disk: If you have disks labelled, this must be supplied to specify the disk type to allocate on.
        :type disk: object
        :param replication: replica placement strategy
        :type replication: object
        :param ttl: file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year
        :type ttl: object
        :param preallocate: If no matching volumes, pre-allocate this number of bytes on disk for new volumes.
        :type preallocate: object
        :param memory_map_max_size_mb: Only implemented for windows. Use memory mapped files with specified size for new volumes.
        :type memory_map_max_size_mb: object
        :param writable_volume_count: If no matching volumes, create specified number of new volumes.
        :type writable_volume_count: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FileKey, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'count',
            'collection',
            'data_center',
            'rack',
            'data_node',
            'disk',
            'replication',
            'ttl',
            'preallocate',
            'memory_map_max_size_mb',
            'writable_volume_count'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dir_assign" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('count') is not None:  # noqa: E501
            _query_params.append(('count', _params['count']))
        if _params.get('collection') is not None:  # noqa: E501
            _query_params.append(('collection', _params['collection']))
        if _params.get('data_center') is not None:  # noqa: E501
            _query_params.append(('dataCenter', _params['data_center']))
        if _params.get('rack') is not None:  # noqa: E501
            _query_params.append(('rack', _params['rack']))
        if _params.get('data_node') is not None:  # noqa: E501
            _query_params.append(('dataNode', _params['data_node']))
        if _params.get('disk') is not None:  # noqa: E501
            _query_params.append(('disk', _params['disk']))
        if _params.get('replication') is not None:  # noqa: E501
            _query_params.append(('replication', _params['replication']))
        if _params.get('ttl') is not None:  # noqa: E501
            _query_params.append(('ttl', _params['ttl']))
        if _params.get('preallocate') is not None:  # noqa: E501
            _query_params.append(('preallocate', _params['preallocate']))
        if _params.get('memory_map_max_size_mb') is not None:  # noqa: E501
            _query_params.append(('memoryMapMaxSizeMb', _params['memory_map_max_size_mb']))
        if _params.get('writable_volume_count') is not None:  # noqa: E501
            _query_params.append(('writableVolumeCount', _params['writable_volume_count']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "FileKey",
        }

        return self.api_client.call_api(
            '/dir/assign', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dir_lookup(self, volume_id : Annotated[Optional[Any], Field(description="volume id")] = None, collection : Annotated[Optional[Any], Field(description="optionally to speed up the lookup")] = None, file_id : Annotated[Optional[Any], Field(description="If provided, this returns the fileId location and a JWT to update or delete the file.")] = None, read : Annotated[Optional[Any], Field(description="works together with \"fileId\", if read=yes, JWT is generated for reads.")] = None, **kwargs) -> object:  # noqa: E501
        """Lookup volume  # noqa: E501

        We would need to find out whether the volumes have moved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dir_lookup(volume_id, collection, file_id, read, async_req=True)
        >>> result = thread.get()

        :param volume_id: volume id
        :type volume_id: object
        :param collection: optionally to speed up the lookup
        :type collection: object
        :param file_id: If provided, this returns the fileId location and a JWT to update or delete the file.
        :type file_id: object
        :param read: works together with \"fileId\", if read=yes, JWT is generated for reads.
        :type read: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.dir_lookup_with_http_info(volume_id, collection, file_id, read, **kwargs)  # noqa: E501

    @validate_arguments
    def dir_lookup_with_http_info(self, volume_id : Annotated[Optional[Any], Field(description="volume id")] = None, collection : Annotated[Optional[Any], Field(description="optionally to speed up the lookup")] = None, file_id : Annotated[Optional[Any], Field(description="If provided, this returns the fileId location and a JWT to update or delete the file.")] = None, read : Annotated[Optional[Any], Field(description="works together with \"fileId\", if read=yes, JWT is generated for reads.")] = None, **kwargs):  # noqa: E501
        """Lookup volume  # noqa: E501

        We would need to find out whether the volumes have moved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dir_lookup_with_http_info(volume_id, collection, file_id, read, async_req=True)
        >>> result = thread.get()

        :param volume_id: volume id
        :type volume_id: object
        :param collection: optionally to speed up the lookup
        :type collection: object
        :param file_id: If provided, this returns the fileId location and a JWT to update or delete the file.
        :type file_id: object
        :param read: works together with \"fileId\", if read=yes, JWT is generated for reads.
        :type read: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'volume_id',
            'collection',
            'file_id',
            'read'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dir_lookup" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('volume_id') is not None:  # noqa: E501
            _query_params.append(('volumeId', _params['volume_id']))
        if _params.get('collection') is not None:  # noqa: E501
            _query_params.append(('collection', _params['collection']))
        if _params.get('file_id') is not None:  # noqa: E501
            _query_params.append(('fileId', _params['file_id']))
        if _params.get('read') is not None:  # noqa: E501
            _query_params.append(('read', _params['read']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/dir/lookup', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
