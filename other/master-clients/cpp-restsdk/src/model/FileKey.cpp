/**
 * Seaweedfs Master Server API
 * The Seaweedfs Master Server API allows you to store blobs
 *
 * The version of the OpenAPI document: 3.43.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FileKey.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FileKey::FileKey()
{
    m_CountIsSet = false;
    m_FidIsSet = false;
    m_UrlIsSet = false;
}

FileKey::~FileKey()
{
}

void FileKey::validate()
{
    // TODO: implement validation
}

web::json::value FileKey::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_Count);
    }
    if(m_FidIsSet)
    {
        val[utility::conversions::to_string_t(U("fid"))] = ModelBase::toJson(m_Fid);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }

    return val;
}

bool FileKey::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fid")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setFid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFid);
            setFid(refVal_setFid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    return ok;
}

void FileKey::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
    }
    if(m_FidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fid")), m_Fid));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
}

bool FileKey::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        std::shared_ptr<AnyType> refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fid"))))
    {
        std::shared_ptr<AnyType> refVal_setFid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fid"))), refVal_setFid );
        setFid(refVal_setFid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        std::shared_ptr<AnyType> refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    return ok;
}

std::shared_ptr<AnyType> FileKey::getCount() const
{
    return m_Count;
}

void FileKey::setCount(const std::shared_ptr<AnyType>& value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool FileKey::countIsSet() const
{
    return m_CountIsSet;
}

void FileKey::unsetCount()
{
    m_CountIsSet = false;
}
std::shared_ptr<AnyType> FileKey::getFid() const
{
    return m_Fid;
}

void FileKey::setFid(const std::shared_ptr<AnyType>& value)
{
    m_Fid = value;
    m_FidIsSet = true;
}

bool FileKey::fidIsSet() const
{
    return m_FidIsSet;
}

void FileKey::unsetFid()
{
    m_FidIsSet = false;
}
std::shared_ptr<AnyType> FileKey::getUrl() const
{
    return m_Url;
}

void FileKey::setUrl(const std::shared_ptr<AnyType>& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool FileKey::urlIsSet() const
{
    return m_UrlIsSet;
}

void FileKey::unsetUrl()
{
    m_UrlIsSet = false;
}
}
}
}
}


