/**
 * Seaweedfs Master Server API
 * The Seaweedfs Master Server API allows you to store blobs
 *
 * The version of the OpenAPI document: 3.43.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DefaultApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/AnyType.h"
#include "CppRestOpenAPIClient/model/FileKey.h"
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DefaultApi 
{
public:

    explicit DefaultApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DefaultApi();

    /// <summary>
    /// Assign a file key
    /// </summary>
    /// <remarks>
    /// This operation is very cheap. Just increase a number in master server&#39;s memory.
    /// </remarks>
    /// <param name="count">how many file ids to assign. Use &lt;fid&gt;_1, &lt;fid&gt;_2 for the assigned additional file ids. e.g. 3,01637037d6_1, 3,01637037d6_2 (optional, default to nullptr)</param>
    /// <param name="collection">required collection name (optional, default to nullptr)</param>
    /// <param name="dataCenter">preferred data center (optional, default to nullptr)</param>
    /// <param name="rack">preferred rack (optional, default to nullptr)</param>
    /// <param name="dataNode">preferred volume server, e.g. 127.0.0.1:8080 (optional, default to nullptr)</param>
    /// <param name="disk">If you have disks labelled, this must be supplied to specify the disk type to allocate on. (optional, default to nullptr)</param>
    /// <param name="replication">replica placement strategy (optional, default to nullptr)</param>
    /// <param name="ttl">file expiration time limit, example: 3m for 3 minutes. units: m-minute, h-hour, d-day, w-week, M-month, y-year (optional, default to nullptr)</param>
    /// <param name="preallocate">If no matching volumes, pre-allocate this number of bytes on disk for new volumes. (optional, default to nullptr)</param>
    /// <param name="memoryMapMaxSizeMb">Only implemented for windows. Use memory mapped files with specified size for new volumes. (optional, default to nullptr)</param>
    /// <param name="writableVolumeCount">If no matching volumes, create specified number of new volumes. (optional, default to nullptr)</param>
    pplx::task<std::shared_ptr<FileKey>> dirAssign(
        boost::optional<std::shared_ptr<AnyType>> count,
        boost::optional<std::shared_ptr<AnyType>> collection,
        boost::optional<std::shared_ptr<AnyType>> dataCenter,
        boost::optional<std::shared_ptr<AnyType>> rack,
        boost::optional<std::shared_ptr<AnyType>> dataNode,
        boost::optional<std::shared_ptr<AnyType>> disk,
        boost::optional<std::shared_ptr<AnyType>> replication,
        boost::optional<std::shared_ptr<AnyType>> ttl,
        boost::optional<std::shared_ptr<AnyType>> preallocate,
        boost::optional<std::shared_ptr<AnyType>> memoryMapMaxSizeMb,
        boost::optional<std::shared_ptr<AnyType>> writableVolumeCount
    ) const;
    /// <summary>
    /// Lookup volume
    /// </summary>
    /// <remarks>
    /// We would need to find out whether the volumes have moved.
    /// </remarks>
    /// <param name="volumeId">volume id (optional, default to nullptr)</param>
    /// <param name="collection">optionally to speed up the lookup (optional, default to nullptr)</param>
    /// <param name="fileId">If provided, this returns the fileId location and a JWT to update or delete the file. (optional, default to nullptr)</param>
    /// <param name="read">works together with \&quot;fileId\&quot;, if read&#x3D;yes, JWT is generated for reads. (optional, default to nullptr)</param>
    pplx::task<std::shared_ptr<AnyType>> dirLookup(
        boost::optional<std::shared_ptr<AnyType>> volumeId,
        boost::optional<std::shared_ptr<AnyType>> collection,
        boost::optional<std::shared_ptr<AnyType>> fileId,
        boost::optional<std::shared_ptr<AnyType>> read
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_ */

