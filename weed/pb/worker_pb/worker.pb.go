// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: worker.proto

package worker_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WorkerMessage represents messages from worker to admin
type WorkerMessage struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	WorkerId  string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Timestamp int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*WorkerMessage_Registration
	//	*WorkerMessage_Heartbeat
	//	*WorkerMessage_TaskRequest
	//	*WorkerMessage_TaskUpdate
	//	*WorkerMessage_TaskComplete
	//	*WorkerMessage_Shutdown
	Message       isWorkerMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerMessage) Reset() {
	*x = WorkerMessage{}
	mi := &file_worker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerMessage) ProtoMessage() {}

func (x *WorkerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerMessage.ProtoReflect.Descriptor instead.
func (*WorkerMessage) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerMessage) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WorkerMessage) GetMessage() isWorkerMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *WorkerMessage) GetRegistration() *WorkerRegistration {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_Registration); ok {
			return x.Registration
		}
	}
	return nil
}

func (x *WorkerMessage) GetHeartbeat() *WorkerHeartbeat {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

func (x *WorkerMessage) GetTaskRequest() *TaskRequest {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_TaskRequest); ok {
			return x.TaskRequest
		}
	}
	return nil
}

func (x *WorkerMessage) GetTaskUpdate() *TaskUpdate {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_TaskUpdate); ok {
			return x.TaskUpdate
		}
	}
	return nil
}

func (x *WorkerMessage) GetTaskComplete() *TaskComplete {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_TaskComplete); ok {
			return x.TaskComplete
		}
	}
	return nil
}

func (x *WorkerMessage) GetShutdown() *WorkerShutdown {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_Shutdown); ok {
			return x.Shutdown
		}
	}
	return nil
}

type isWorkerMessage_Message interface {
	isWorkerMessage_Message()
}

type WorkerMessage_Registration struct {
	Registration *WorkerRegistration `protobuf:"bytes,3,opt,name=registration,proto3,oneof"`
}

type WorkerMessage_Heartbeat struct {
	Heartbeat *WorkerHeartbeat `protobuf:"bytes,4,opt,name=heartbeat,proto3,oneof"`
}

type WorkerMessage_TaskRequest struct {
	TaskRequest *TaskRequest `protobuf:"bytes,5,opt,name=task_request,json=taskRequest,proto3,oneof"`
}

type WorkerMessage_TaskUpdate struct {
	TaskUpdate *TaskUpdate `protobuf:"bytes,6,opt,name=task_update,json=taskUpdate,proto3,oneof"`
}

type WorkerMessage_TaskComplete struct {
	TaskComplete *TaskComplete `protobuf:"bytes,7,opt,name=task_complete,json=taskComplete,proto3,oneof"`
}

type WorkerMessage_Shutdown struct {
	Shutdown *WorkerShutdown `protobuf:"bytes,8,opt,name=shutdown,proto3,oneof"`
}

func (*WorkerMessage_Registration) isWorkerMessage_Message() {}

func (*WorkerMessage_Heartbeat) isWorkerMessage_Message() {}

func (*WorkerMessage_TaskRequest) isWorkerMessage_Message() {}

func (*WorkerMessage_TaskUpdate) isWorkerMessage_Message() {}

func (*WorkerMessage_TaskComplete) isWorkerMessage_Message() {}

func (*WorkerMessage_Shutdown) isWorkerMessage_Message() {}

// AdminMessage represents messages from admin to worker
type AdminMessage struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	AdminId   string                 `protobuf:"bytes,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	Timestamp int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*AdminMessage_RegistrationResponse
	//	*AdminMessage_HeartbeatResponse
	//	*AdminMessage_TaskAssignment
	//	*AdminMessage_TaskCancellation
	//	*AdminMessage_AdminShutdown
	Message       isAdminMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminMessage) Reset() {
	*x = AdminMessage{}
	mi := &file_worker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminMessage) ProtoMessage() {}

func (x *AdminMessage) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminMessage.ProtoReflect.Descriptor instead.
func (*AdminMessage) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{1}
}

func (x *AdminMessage) GetAdminId() string {
	if x != nil {
		return x.AdminId
	}
	return ""
}

func (x *AdminMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AdminMessage) GetMessage() isAdminMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AdminMessage) GetRegistrationResponse() *RegistrationResponse {
	if x != nil {
		if x, ok := x.Message.(*AdminMessage_RegistrationResponse); ok {
			return x.RegistrationResponse
		}
	}
	return nil
}

func (x *AdminMessage) GetHeartbeatResponse() *HeartbeatResponse {
	if x != nil {
		if x, ok := x.Message.(*AdminMessage_HeartbeatResponse); ok {
			return x.HeartbeatResponse
		}
	}
	return nil
}

func (x *AdminMessage) GetTaskAssignment() *TaskAssignment {
	if x != nil {
		if x, ok := x.Message.(*AdminMessage_TaskAssignment); ok {
			return x.TaskAssignment
		}
	}
	return nil
}

func (x *AdminMessage) GetTaskCancellation() *TaskCancellation {
	if x != nil {
		if x, ok := x.Message.(*AdminMessage_TaskCancellation); ok {
			return x.TaskCancellation
		}
	}
	return nil
}

func (x *AdminMessage) GetAdminShutdown() *AdminShutdown {
	if x != nil {
		if x, ok := x.Message.(*AdminMessage_AdminShutdown); ok {
			return x.AdminShutdown
		}
	}
	return nil
}

type isAdminMessage_Message interface {
	isAdminMessage_Message()
}

type AdminMessage_RegistrationResponse struct {
	RegistrationResponse *RegistrationResponse `protobuf:"bytes,3,opt,name=registration_response,json=registrationResponse,proto3,oneof"`
}

type AdminMessage_HeartbeatResponse struct {
	HeartbeatResponse *HeartbeatResponse `protobuf:"bytes,4,opt,name=heartbeat_response,json=heartbeatResponse,proto3,oneof"`
}

type AdminMessage_TaskAssignment struct {
	TaskAssignment *TaskAssignment `protobuf:"bytes,5,opt,name=task_assignment,json=taskAssignment,proto3,oneof"`
}

type AdminMessage_TaskCancellation struct {
	TaskCancellation *TaskCancellation `protobuf:"bytes,6,opt,name=task_cancellation,json=taskCancellation,proto3,oneof"`
}

type AdminMessage_AdminShutdown struct {
	AdminShutdown *AdminShutdown `protobuf:"bytes,7,opt,name=admin_shutdown,json=adminShutdown,proto3,oneof"`
}

func (*AdminMessage_RegistrationResponse) isAdminMessage_Message() {}

func (*AdminMessage_HeartbeatResponse) isAdminMessage_Message() {}

func (*AdminMessage_TaskAssignment) isAdminMessage_Message() {}

func (*AdminMessage_TaskCancellation) isAdminMessage_Message() {}

func (*AdminMessage_AdminShutdown) isAdminMessage_Message() {}

// WorkerRegistration message when worker connects
type WorkerRegistration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Capabilities  []string               `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	MaxConcurrent int32                  `protobuf:"varint,4,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerRegistration) Reset() {
	*x = WorkerRegistration{}
	mi := &file_worker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerRegistration) ProtoMessage() {}

func (x *WorkerRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerRegistration.ProtoReflect.Descriptor instead.
func (*WorkerRegistration) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{2}
}

func (x *WorkerRegistration) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerRegistration) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WorkerRegistration) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *WorkerRegistration) GetMaxConcurrent() int32 {
	if x != nil {
		return x.MaxConcurrent
	}
	return 0
}

func (x *WorkerRegistration) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// RegistrationResponse confirms worker registration
type RegistrationResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Success          bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message          string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AssignedWorkerId string                 `protobuf:"bytes,3,opt,name=assigned_worker_id,json=assignedWorkerId,proto3" json:"assigned_worker_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RegistrationResponse) Reset() {
	*x = RegistrationResponse{}
	mi := &file_worker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationResponse) ProtoMessage() {}

func (x *RegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationResponse.ProtoReflect.Descriptor instead.
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{3}
}

func (x *RegistrationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegistrationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistrationResponse) GetAssignedWorkerId() string {
	if x != nil {
		return x.AssignedWorkerId
	}
	return ""
}

// WorkerHeartbeat sent periodically by worker
type WorkerHeartbeat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WorkerId       string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Status         string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	CurrentLoad    int32                  `protobuf:"varint,3,opt,name=current_load,json=currentLoad,proto3" json:"current_load,omitempty"`
	MaxConcurrent  int32                  `protobuf:"varint,4,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"`
	CurrentTaskIds []string               `protobuf:"bytes,5,rep,name=current_task_ids,json=currentTaskIds,proto3" json:"current_task_ids,omitempty"`
	TasksCompleted int32                  `protobuf:"varint,6,opt,name=tasks_completed,json=tasksCompleted,proto3" json:"tasks_completed,omitempty"`
	TasksFailed    int32                  `protobuf:"varint,7,opt,name=tasks_failed,json=tasksFailed,proto3" json:"tasks_failed,omitempty"`
	UptimeSeconds  int64                  `protobuf:"varint,8,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkerHeartbeat) Reset() {
	*x = WorkerHeartbeat{}
	mi := &file_worker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerHeartbeat) ProtoMessage() {}

func (x *WorkerHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerHeartbeat.ProtoReflect.Descriptor instead.
func (*WorkerHeartbeat) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{4}
}

func (x *WorkerHeartbeat) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerHeartbeat) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkerHeartbeat) GetCurrentLoad() int32 {
	if x != nil {
		return x.CurrentLoad
	}
	return 0
}

func (x *WorkerHeartbeat) GetMaxConcurrent() int32 {
	if x != nil {
		return x.MaxConcurrent
	}
	return 0
}

func (x *WorkerHeartbeat) GetCurrentTaskIds() []string {
	if x != nil {
		return x.CurrentTaskIds
	}
	return nil
}

func (x *WorkerHeartbeat) GetTasksCompleted() int32 {
	if x != nil {
		return x.TasksCompleted
	}
	return 0
}

func (x *WorkerHeartbeat) GetTasksFailed() int32 {
	if x != nil {
		return x.TasksFailed
	}
	return 0
}

func (x *WorkerHeartbeat) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

// HeartbeatResponse acknowledges heartbeat
type HeartbeatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	mi := &file_worker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{5}
}

func (x *HeartbeatResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *HeartbeatResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// TaskRequest from worker asking for new tasks
type TaskRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WorkerId       string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Capabilities   []string               `protobuf:"bytes,2,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	AvailableSlots int32                  `protobuf:"varint,3,opt,name=available_slots,json=availableSlots,proto3" json:"available_slots,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	mi := &file_worker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{6}
}

func (x *TaskRequest) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *TaskRequest) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *TaskRequest) GetAvailableSlots() int32 {
	if x != nil {
		return x.AvailableSlots
	}
	return 0
}

// TaskAssignment from admin to worker
type TaskAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskType      string                 `protobuf:"bytes,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	Params        *TaskParams            `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	Priority      int32                  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	CreatedTime   int64                  `protobuf:"varint,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskAssignment) Reset() {
	*x = TaskAssignment{}
	mi := &file_worker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignment) ProtoMessage() {}

func (x *TaskAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignment.ProtoReflect.Descriptor instead.
func (*TaskAssignment) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{7}
}

func (x *TaskAssignment) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskAssignment) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskAssignment) GetParams() *TaskParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *TaskAssignment) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TaskAssignment) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *TaskAssignment) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TaskParams contains task-specific parameters
type TaskParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VolumeId      uint32                 `protobuf:"varint,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	Server        string                 `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	DataCenter    string                 `protobuf:"bytes,4,opt,name=data_center,json=dataCenter,proto3" json:"data_center,omitempty"`
	Rack          string                 `protobuf:"bytes,5,opt,name=rack,proto3" json:"rack,omitempty"`
	Replicas      []string               `protobuf:"bytes,6,rep,name=replicas,proto3" json:"replicas,omitempty"`
	Parameters    map[string]string      `protobuf:"bytes,7,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskParams) Reset() {
	*x = TaskParams{}
	mi := &file_worker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskParams) ProtoMessage() {}

func (x *TaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskParams.ProtoReflect.Descriptor instead.
func (*TaskParams) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{8}
}

func (x *TaskParams) GetVolumeId() uint32 {
	if x != nil {
		return x.VolumeId
	}
	return 0
}

func (x *TaskParams) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *TaskParams) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *TaskParams) GetDataCenter() string {
	if x != nil {
		return x.DataCenter
	}
	return ""
}

func (x *TaskParams) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *TaskParams) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *TaskParams) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// TaskUpdate reports task progress
type TaskUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	WorkerId      string                 `protobuf:"bytes,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Progress      float32                `protobuf:"fixed32,4,opt,name=progress,proto3" json:"progress,omitempty"`
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskUpdate) Reset() {
	*x = TaskUpdate{}
	mi := &file_worker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdate) ProtoMessage() {}

func (x *TaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdate.ProtoReflect.Descriptor instead.
func (*TaskUpdate) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{9}
}

func (x *TaskUpdate) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskUpdate) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *TaskUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskUpdate) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *TaskUpdate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskUpdate) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TaskComplete reports task completion
type TaskComplete struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TaskId         string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	WorkerId       string                 `protobuf:"bytes,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Success        bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage   string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	CompletionTime int64                  `protobuf:"varint,5,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	ResultMetadata map[string]string      `protobuf:"bytes,6,rep,name=result_metadata,json=resultMetadata,proto3" json:"result_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TaskComplete) Reset() {
	*x = TaskComplete{}
	mi := &file_worker_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskComplete) ProtoMessage() {}

func (x *TaskComplete) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskComplete.ProtoReflect.Descriptor instead.
func (*TaskComplete) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{10}
}

func (x *TaskComplete) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskComplete) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *TaskComplete) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TaskComplete) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TaskComplete) GetCompletionTime() int64 {
	if x != nil {
		return x.CompletionTime
	}
	return 0
}

func (x *TaskComplete) GetResultMetadata() map[string]string {
	if x != nil {
		return x.ResultMetadata
	}
	return nil
}

// TaskCancellation from admin to cancel a task
type TaskCancellation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Force         bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskCancellation) Reset() {
	*x = TaskCancellation{}
	mi := &file_worker_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCancellation) ProtoMessage() {}

func (x *TaskCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCancellation.ProtoReflect.Descriptor instead.
func (*TaskCancellation) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{11}
}

func (x *TaskCancellation) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskCancellation) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TaskCancellation) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// WorkerShutdown notifies admin that worker is shutting down
type WorkerShutdown struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WorkerId       string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Reason         string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	PendingTaskIds []string               `protobuf:"bytes,3,rep,name=pending_task_ids,json=pendingTaskIds,proto3" json:"pending_task_ids,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkerShutdown) Reset() {
	*x = WorkerShutdown{}
	mi := &file_worker_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerShutdown) ProtoMessage() {}

func (x *WorkerShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerShutdown.ProtoReflect.Descriptor instead.
func (*WorkerShutdown) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{12}
}

func (x *WorkerShutdown) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerShutdown) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *WorkerShutdown) GetPendingTaskIds() []string {
	if x != nil {
		return x.PendingTaskIds
	}
	return nil
}

// AdminShutdown notifies worker that admin is shutting down
type AdminShutdown struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Reason                  string                 `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	GracefulShutdownSeconds int32                  `protobuf:"varint,2,opt,name=graceful_shutdown_seconds,json=gracefulShutdownSeconds,proto3" json:"graceful_shutdown_seconds,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AdminShutdown) Reset() {
	*x = AdminShutdown{}
	mi := &file_worker_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminShutdown) ProtoMessage() {}

func (x *AdminShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminShutdown.ProtoReflect.Descriptor instead.
func (*AdminShutdown) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{13}
}

func (x *AdminShutdown) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AdminShutdown) GetGracefulShutdownSeconds() int32 {
	if x != nil {
		return x.GracefulShutdownSeconds
	}
	return 0
}

var File_worker_proto protoreflect.FileDescriptor

const file_worker_proto_rawDesc = "" +
	"\n" +
	"\fworker.proto\x12\tworker_pb\"\xc6\x03\n" +
	"\rWorkerMessage\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12C\n" +
	"\fregistration\x18\x03 \x01(\v2\x1d.worker_pb.WorkerRegistrationH\x00R\fregistration\x12:\n" +
	"\theartbeat\x18\x04 \x01(\v2\x1a.worker_pb.WorkerHeartbeatH\x00R\theartbeat\x12;\n" +
	"\ftask_request\x18\x05 \x01(\v2\x16.worker_pb.TaskRequestH\x00R\vtaskRequest\x128\n" +
	"\vtask_update\x18\x06 \x01(\v2\x15.worker_pb.TaskUpdateH\x00R\n" +
	"taskUpdate\x12>\n" +
	"\rtask_complete\x18\a \x01(\v2\x17.worker_pb.TaskCompleteH\x00R\ftaskComplete\x127\n" +
	"\bshutdown\x18\b \x01(\v2\x19.worker_pb.WorkerShutdownH\x00R\bshutdownB\t\n" +
	"\amessage\"\xce\x03\n" +
	"\fAdminMessage\x12\x19\n" +
	"\badmin_id\x18\x01 \x01(\tR\aadminId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12V\n" +
	"\x15registration_response\x18\x03 \x01(\v2\x1f.worker_pb.RegistrationResponseH\x00R\x14registrationResponse\x12M\n" +
	"\x12heartbeat_response\x18\x04 \x01(\v2\x1c.worker_pb.HeartbeatResponseH\x00R\x11heartbeatResponse\x12D\n" +
	"\x0ftask_assignment\x18\x05 \x01(\v2\x19.worker_pb.TaskAssignmentH\x00R\x0etaskAssignment\x12J\n" +
	"\x11task_cancellation\x18\x06 \x01(\v2\x1b.worker_pb.TaskCancellationH\x00R\x10taskCancellation\x12A\n" +
	"\x0eadmin_shutdown\x18\a \x01(\v2\x18.worker_pb.AdminShutdownH\x00R\radminShutdownB\t\n" +
	"\amessage\"\x9c\x02\n" +
	"\x12WorkerRegistration\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\"\n" +
	"\fcapabilities\x18\x03 \x03(\tR\fcapabilities\x12%\n" +
	"\x0emax_concurrent\x18\x04 \x01(\x05R\rmaxConcurrent\x12G\n" +
	"\bmetadata\x18\x05 \x03(\v2+.worker_pb.WorkerRegistration.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"x\n" +
	"\x14RegistrationResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12,\n" +
	"\x12assigned_worker_id\x18\x03 \x01(\tR\x10assignedWorkerId\"\xad\x02\n" +
	"\x0fWorkerHeartbeat\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12!\n" +
	"\fcurrent_load\x18\x03 \x01(\x05R\vcurrentLoad\x12%\n" +
	"\x0emax_concurrent\x18\x04 \x01(\x05R\rmaxConcurrent\x12(\n" +
	"\x10current_task_ids\x18\x05 \x03(\tR\x0ecurrentTaskIds\x12'\n" +
	"\x0ftasks_completed\x18\x06 \x01(\x05R\x0etasksCompleted\x12!\n" +
	"\ftasks_failed\x18\a \x01(\x05R\vtasksFailed\x12%\n" +
	"\x0euptime_seconds\x18\b \x01(\x03R\ruptimeSeconds\"G\n" +
	"\x11HeartbeatResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"w\n" +
	"\vTaskRequest\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\"\n" +
	"\fcapabilities\x18\x02 \x03(\tR\fcapabilities\x12'\n" +
	"\x0favailable_slots\x18\x03 \x01(\x05R\x0eavailableSlots\"\xb6\x02\n" +
	"\x0eTaskAssignment\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1b\n" +
	"\ttask_type\x18\x02 \x01(\tR\btaskType\x12-\n" +
	"\x06params\x18\x03 \x01(\v2\x15.worker_pb.TaskParamsR\x06params\x12\x1a\n" +
	"\bpriority\x18\x04 \x01(\x05R\bpriority\x12!\n" +
	"\fcreated_time\x18\x05 \x01(\x03R\vcreatedTime\x12C\n" +
	"\bmetadata\x18\x06 \x03(\v2'.worker_pb.TaskAssignment.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb8\x02\n" +
	"\n" +
	"TaskParams\x12\x1b\n" +
	"\tvolume_id\x18\x01 \x01(\rR\bvolumeId\x12\x16\n" +
	"\x06server\x18\x02 \x01(\tR\x06server\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x1f\n" +
	"\vdata_center\x18\x04 \x01(\tR\n" +
	"dataCenter\x12\x12\n" +
	"\x04rack\x18\x05 \x01(\tR\x04rack\x12\x1a\n" +
	"\breplicas\x18\x06 \x03(\tR\breplicas\x12E\n" +
	"\n" +
	"parameters\x18\a \x03(\v2%.worker_pb.TaskParams.ParametersEntryR\n" +
	"parameters\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8e\x02\n" +
	"\n" +
	"TaskUpdate\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1b\n" +
	"\tworker_id\x18\x02 \x01(\tR\bworkerId\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12\x1a\n" +
	"\bprogress\x18\x04 \x01(\x02R\bprogress\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\x12?\n" +
	"\bmetadata\x18\x06 \x03(\v2#.worker_pb.TaskUpdate.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc5\x02\n" +
	"\fTaskComplete\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1b\n" +
	"\tworker_id\x18\x02 \x01(\tR\bworkerId\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\x12'\n" +
	"\x0fcompletion_time\x18\x05 \x01(\x03R\x0ecompletionTime\x12T\n" +
	"\x0fresult_metadata\x18\x06 \x03(\v2+.worker_pb.TaskComplete.ResultMetadataEntryR\x0eresultMetadata\x1aA\n" +
	"\x13ResultMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"Y\n" +
	"\x10TaskCancellation\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x14\n" +
	"\x05force\x18\x03 \x01(\bR\x05force\"o\n" +
	"\x0eWorkerShutdown\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12(\n" +
	"\x10pending_task_ids\x18\x03 \x03(\tR\x0ependingTaskIds\"c\n" +
	"\rAdminShutdown\x12\x16\n" +
	"\x06reason\x18\x01 \x01(\tR\x06reason\x12:\n" +
	"\x19graceful_shutdown_seconds\x18\x02 \x01(\x05R\x17gracefulShutdownSeconds2V\n" +
	"\rWorkerService\x12E\n" +
	"\fWorkerStream\x12\x18.worker_pb.WorkerMessage\x1a\x17.worker_pb.AdminMessage(\x010\x01B2Z0github.com/seaweedfs/seaweedfs/weed/pb/worker_pbb\x06proto3"

var (
	file_worker_proto_rawDescOnce sync.Once
	file_worker_proto_rawDescData []byte
)

func file_worker_proto_rawDescGZIP() []byte {
	file_worker_proto_rawDescOnce.Do(func() {
		file_worker_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_worker_proto_rawDesc), len(file_worker_proto_rawDesc)))
	})
	return file_worker_proto_rawDescData
}

var file_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_worker_proto_goTypes = []any{
	(*WorkerMessage)(nil),        // 0: worker_pb.WorkerMessage
	(*AdminMessage)(nil),         // 1: worker_pb.AdminMessage
	(*WorkerRegistration)(nil),   // 2: worker_pb.WorkerRegistration
	(*RegistrationResponse)(nil), // 3: worker_pb.RegistrationResponse
	(*WorkerHeartbeat)(nil),      // 4: worker_pb.WorkerHeartbeat
	(*HeartbeatResponse)(nil),    // 5: worker_pb.HeartbeatResponse
	(*TaskRequest)(nil),          // 6: worker_pb.TaskRequest
	(*TaskAssignment)(nil),       // 7: worker_pb.TaskAssignment
	(*TaskParams)(nil),           // 8: worker_pb.TaskParams
	(*TaskUpdate)(nil),           // 9: worker_pb.TaskUpdate
	(*TaskComplete)(nil),         // 10: worker_pb.TaskComplete
	(*TaskCancellation)(nil),     // 11: worker_pb.TaskCancellation
	(*WorkerShutdown)(nil),       // 12: worker_pb.WorkerShutdown
	(*AdminShutdown)(nil),        // 13: worker_pb.AdminShutdown
	nil,                          // 14: worker_pb.WorkerRegistration.MetadataEntry
	nil,                          // 15: worker_pb.TaskAssignment.MetadataEntry
	nil,                          // 16: worker_pb.TaskParams.ParametersEntry
	nil,                          // 17: worker_pb.TaskUpdate.MetadataEntry
	nil,                          // 18: worker_pb.TaskComplete.ResultMetadataEntry
}
var file_worker_proto_depIdxs = []int32{
	2,  // 0: worker_pb.WorkerMessage.registration:type_name -> worker_pb.WorkerRegistration
	4,  // 1: worker_pb.WorkerMessage.heartbeat:type_name -> worker_pb.WorkerHeartbeat
	6,  // 2: worker_pb.WorkerMessage.task_request:type_name -> worker_pb.TaskRequest
	9,  // 3: worker_pb.WorkerMessage.task_update:type_name -> worker_pb.TaskUpdate
	10, // 4: worker_pb.WorkerMessage.task_complete:type_name -> worker_pb.TaskComplete
	12, // 5: worker_pb.WorkerMessage.shutdown:type_name -> worker_pb.WorkerShutdown
	3,  // 6: worker_pb.AdminMessage.registration_response:type_name -> worker_pb.RegistrationResponse
	5,  // 7: worker_pb.AdminMessage.heartbeat_response:type_name -> worker_pb.HeartbeatResponse
	7,  // 8: worker_pb.AdminMessage.task_assignment:type_name -> worker_pb.TaskAssignment
	11, // 9: worker_pb.AdminMessage.task_cancellation:type_name -> worker_pb.TaskCancellation
	13, // 10: worker_pb.AdminMessage.admin_shutdown:type_name -> worker_pb.AdminShutdown
	14, // 11: worker_pb.WorkerRegistration.metadata:type_name -> worker_pb.WorkerRegistration.MetadataEntry
	8,  // 12: worker_pb.TaskAssignment.params:type_name -> worker_pb.TaskParams
	15, // 13: worker_pb.TaskAssignment.metadata:type_name -> worker_pb.TaskAssignment.MetadataEntry
	16, // 14: worker_pb.TaskParams.parameters:type_name -> worker_pb.TaskParams.ParametersEntry
	17, // 15: worker_pb.TaskUpdate.metadata:type_name -> worker_pb.TaskUpdate.MetadataEntry
	18, // 16: worker_pb.TaskComplete.result_metadata:type_name -> worker_pb.TaskComplete.ResultMetadataEntry
	0,  // 17: worker_pb.WorkerService.WorkerStream:input_type -> worker_pb.WorkerMessage
	1,  // 18: worker_pb.WorkerService.WorkerStream:output_type -> worker_pb.AdminMessage
	18, // [18:19] is the sub-list for method output_type
	17, // [17:18] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_worker_proto_init() }
func file_worker_proto_init() {
	if File_worker_proto != nil {
		return
	}
	file_worker_proto_msgTypes[0].OneofWrappers = []any{
		(*WorkerMessage_Registration)(nil),
		(*WorkerMessage_Heartbeat)(nil),
		(*WorkerMessage_TaskRequest)(nil),
		(*WorkerMessage_TaskUpdate)(nil),
		(*WorkerMessage_TaskComplete)(nil),
		(*WorkerMessage_Shutdown)(nil),
	}
	file_worker_proto_msgTypes[1].OneofWrappers = []any{
		(*AdminMessage_RegistrationResponse)(nil),
		(*AdminMessage_HeartbeatResponse)(nil),
		(*AdminMessage_TaskAssignment)(nil),
		(*AdminMessage_TaskCancellation)(nil),
		(*AdminMessage_AdminShutdown)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_worker_proto_rawDesc), len(file_worker_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_worker_proto_goTypes,
		DependencyIndexes: file_worker_proto_depIdxs,
		MessageInfos:      file_worker_proto_msgTypes,
	}.Build()
	File_worker_proto = out.File
	file_worker_proto_goTypes = nil
	file_worker_proto_depIdxs = nil
}
