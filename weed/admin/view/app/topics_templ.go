// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package app

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "fmt"
import "strings"
import "github.com/seaweedfs/seaweedfs/weed/admin/dash"

func Topics(data dash.TopicsData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container-fluid\"><div class=\"row\"><div class=\"col-12\"><div class=\"d-flex justify-content-between align-items-center mb-4\"><h1 class=\"h3 mb-0\">Message Queue Topics</h1><small class=\"text-muted\">Last updated: ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(data.LastUpdated.Format("2006-01-02 15:04:05"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/app/topics.templ`, Line: 13, Col: 107}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</small></div><!-- Summary Cards --><div class=\"row mb-4\"><div class=\"col-md-6\"><div class=\"card text-center\"><div class=\"card-body\"><h5 class=\"card-title\">Total Topics</h5><h3 class=\"text-primary\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.TotalTopics))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/app/topics.templ`, Line: 22, Col: 93}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</h3></div></div></div><div class=\"col-md-6\"><div class=\"card text-center\"><div class=\"card-body\"><h5 class=\"card-title\">Available Topics</h5><h3 class=\"text-info\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", len(data.Topics)))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/app/topics.templ`, Line: 30, Col: 90}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</h3></div></div></div></div><!-- Topics Table --><div class=\"card\"><div class=\"card-header d-flex justify-content-between align-items-center\"><h5 class=\"mb-0\">Topics</h5><div><button class=\"btn btn-sm btn-outline-secondary\" onclick=\"exportTopicsCSV()\"><i class=\"fas fa-download me-1\"></i>Export CSV</button></div></div><div class=\"card-body\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(data.Topics) == 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<div class=\"text-center py-4\"><i class=\"fas fa-list-alt fa-3x text-muted mb-3\"></i><h5>No Topics Found</h5><p class=\"text-muted\">No message queue topics are currently configured.</p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<div class=\"table-responsive\"><table class=\"table table-striped\" id=\"topicsTable\"><thead><tr><th>Namespace</th><th>Topic Name</th><th>Partitions</th><th>Actions</th></tr></thead> <tbody>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, topic := range data.Topics {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<tr class=\"topic-row\" data-topic-name=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(topic.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/app/topics.templ`, Line: 66, Col: 93}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\" style=\"cursor: pointer;\"><td><span class=\"badge bg-secondary\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(func() string {
					idx := strings.LastIndex(topic.Name, ".")
					if idx == -1 {
						return "default"
					}
					return topic.Name[:idx]
				}())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/app/topics.templ`, Line: 74, Col: 55}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</span></td><td><strong>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(func() string {
					idx := strings.LastIndex(topic.Name, ".")
					if idx == -1 {
						return topic.Name
					}
					return topic.Name[idx+1:]
				}())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/app/topics.templ`, Line: 83, Col: 55}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</strong></td><td><span class=\"badge bg-info\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", topic.Partitions))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/app/topics.templ`, Line: 86, Col: 116}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "</span></td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.ComponentScript{Call: fmt.Sprintf("viewTopicDetails('%s')", topic.Name)})
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<button class=\"btn btn-sm btn-outline-primary\" onclick=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 templ.ComponentScript = templ.ComponentScript{Call: fmt.Sprintf("viewTopicDetails('%s')", topic.Name)}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var9.Call)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\"><i class=\"fas fa-info-circle me-1\"></i>Details</button></td></tr><tr class=\"topic-details-row\" id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var10 string
				templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("details-%s", strings.ReplaceAll(topic.Name, ".", "_")))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/app/topics.templ`, Line: 94, Col: 146}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\" style=\"display: none;\"><td colspan=\"4\"><div class=\"topic-details-content\"><div class=\"text-center py-3\"><i class=\"fas fa-spinner fa-spin\"></i> Loading topic details...</div></div></td></tr>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</tbody></table></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "</div></div></div></div></div><script>\n        function viewTopicDetails(topicName) {\n            const parts = topicName.split('.');\n            if (parts.length >= 2) {\n                const namespace = parts[0];\n                const topic = parts.slice(1).join('.');\n                window.location.href = `/mq/topics/${namespace}/${topic}`;\n            }\n        }\n\n        function toggleTopicDetails(topicName) {\n            const safeName = topicName.replace(/\\./g, '_');\n            const detailsRow = document.getElementById(`details-${safeName}`);\n            if (!detailsRow) return;\n\n            if (detailsRow.style.display === 'none') {\n                // Show details row and load data\n                detailsRow.style.display = 'table-row';\n                loadTopicDetails(topicName);\n            } else {\n                // Hide details row\n                detailsRow.style.display = 'none';\n            }\n        }\n\n        function loadTopicDetails(topicName) {\n            const parts = topicName.split('.');\n            if (parts.length < 2) return;\n            \n            const namespace = parts[0];\n            const topic = parts.slice(1).join('.');\n            const safeName = topicName.replace(/\\./g, '_');\n            const contentDiv = document.querySelector(`#details-${safeName} .topic-details-content`);\n            \n            if (!contentDiv) return;\n\n            // Show loading spinner\n            contentDiv.innerHTML = `\n                <div class=\"text-center py-3\">\n                    <i class=\"fas fa-spinner fa-spin\"></i> Loading topic details...\n                </div>\n            `;\n\n            // Make AJAX call to get topic details\n            fetch(`/api/mq/topics/${namespace}/${topic}`)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.error) {\n                        contentDiv.innerHTML = `\n                            <div class=\"alert alert-danger\" role=\"alert\">\n                                <i class=\"fas fa-exclamation-triangle\"></i> Error: ${data.error}\n                            </div>\n                        `;\n                        return;\n                    }\n\n                    // Render topic details\n                    contentDiv.innerHTML = renderTopicDetails(data);\n                })\n                .catch(error => {\n                    contentDiv.innerHTML = `\n                        <div class=\"alert alert-danger\" role=\"alert\">\n                            <i class=\"fas fa-exclamation-triangle\"></i> Failed to load topic details: ${error.message}\n                        </div>\n                    `;\n                });\n        }\n\n        function renderTopicDetails(data) {\n            const createdAt = new Date(data.created_at).toLocaleString();\n            const lastUpdated = new Date(data.last_updated).toLocaleString();\n\n            let schemaHtml = '';\n            if (data.schema && data.schema.length > 0) {\n                schemaHtml = `\n                    <div class=\"col-md-6\">\n                        <h6>Schema Fields</h6>\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-sm\">\n                                <thead>\n                                    <tr>\n                                        <th>Field</th>\n                                        <th>Type</th>\n                                        <th>Required</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    ${data.schema.map(field => `\n                                        <tr>\n                                            <td>${field.name}</td>\n                                            <td><span class=\"badge bg-secondary\">${field.type}</span></td>\n                                            <td>${field.required ? '<span class=\"badge bg-success\">Yes</span>' : '<span class=\"badge bg-light text-dark\">No</span>'}</td>\n                                        </tr>\n                                    `).join('')}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                `;\n            }\n\n            let partitionsHtml = '';\n            if (data.partitions && data.partitions.length > 0) {\n                partitionsHtml = `\n                    <div class=\"col-md-6\">\n                        <h6>Partitions</h6>\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-sm\">\n                                <thead>\n                                    <tr>\n                                        <th>ID</th>\n                                        <th>Leader</th>\n                                        <th>Follower</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    ${data.partitions.map(partition => `\n                                        <tr>\n                                            <td>${partition.id}</td>\n                                            <td>${partition.leader_broker || 'N/A'}</td>\n                                            <td>${partition.follower_broker || 'N/A'}</td>\n                                        </tr>\n                                    `).join('')}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                `;\n            }\n\n            let publishersHtml = '';\n            if (data.publishers && data.publishers.length > 0) {\n                publishersHtml = `\n                    <div class=\"col-md-6\">\n                        <h6>Active Publishers <span class=\"badge bg-success\">${data.publishers.length}</span></h6>\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-sm\">\n                                <thead>\n                                    <tr>\n                                        <th>Publisher</th>\n                                        <th>Partition</th>\n                                        <th>Broker</th>\n                                        <th>Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    ${data.publishers.map(publisher => `\n                                        <tr>\n                                            <td>${publisher.publisher_name}</td>\n                                            <td>${publisher.partition_id}</td>\n                                            <td>${publisher.broker}</td>\n                                            <td>${publisher.is_active ? '<span class=\"badge bg-success\">Active</span>' : '<span class=\"badge bg-secondary\">Inactive</span>'}</td>\n                                        </tr>\n                                    `).join('')}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                `;\n            } else if (data.publishers !== undefined) {\n                publishersHtml = `\n                    <div class=\"col-md-6\">\n                        <h6>Active Publishers <span class=\"badge bg-secondary\">0</span></h6>\n                        <div class=\"alert alert-info mb-0\">\n                            <i class=\"fas fa-info-circle\"></i> No active publishers found for this topic.\n                        </div>\n                    </div>\n                `;\n            }\n\n            let subscribersHtml = '';\n            if (data.subscribers && data.subscribers.length > 0) {\n                subscribersHtml = `\n                    <div class=\"col-md-6\">\n                        <h6>Active Subscribers <span class=\"badge bg-info\">${data.subscribers.length}</span></h6>\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-sm\">\n                                <thead>\n                                    <tr>\n                                        <th>Consumer Group</th>\n                                        <th>Consumer ID</th>\n                                        <th>Partition</th>\n                                        <th>Broker</th>\n                                        <th>Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    ${data.subscribers.map(subscriber => `\n                                        <tr>\n                                            <td>${subscriber.consumer_group}</td>\n                                            <td>${subscriber.consumer_id}</td>\n                                            <td>${subscriber.partition_id}</td>\n                                            <td>${subscriber.broker}</td>\n                                            <td>${subscriber.is_active ? '<span class=\"badge bg-success\">Active</span>' : '<span class=\"badge bg-secondary\">Inactive</span>'}</td>\n                                        </tr>\n                                    `).join('')}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                `;\n            } else if (data.subscribers !== undefined) {\n                subscribersHtml = `\n                    <div class=\"col-md-6\">\n                        <h6>Active Subscribers <span class=\"badge bg-secondary\">0</span></h6>\n                        <div class=\"alert alert-info mb-0\">\n                            <i class=\"fas fa-info-circle\"></i> No active subscribers found for this topic.\n                        </div>\n                    </div>\n                `;\n            }\n\n            return `\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h5>Topic Details: ${data.namespace}.${data.name}</h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"row mb-3\">\n                            <div class=\"col-md-3\">\n                                <strong>Namespace:</strong> ${data.namespace}\n                            </div>\n                            <div class=\"col-md-3\">\n                                <strong>Topic Name:</strong> ${data.name}\n                            </div>\n                            <div class=\"col-md-3\">\n                                <strong>Created:</strong> ${createdAt}\n                            </div>\n                            <div class=\"col-md-3\">\n                                <strong>Last Updated:</strong> ${lastUpdated}\n                            </div>\n                        </div>\n                        <div class=\"row mb-3\">\n                            ${schemaHtml}\n                            ${partitionsHtml}\n                        </div>\n                        ${(data.publishers !== undefined || data.subscribers !== undefined) ? `\n                            <div class=\"row\">\n                                ${publishersHtml}\n                                ${subscribersHtml}\n                            </div>\n                        ` : ''}\n                    </div>\n                </div>\n            `;\n        }\n\n        function exportTopicsCSV() {\n            const table = document.getElementById('topicsTable');\n            if (!table) return;\n            \n            let csv = 'Namespace,Topic Name,Partitions\\n';\n            \n            const rows = table.querySelectorAll('tbody tr.topic-row');\n            rows.forEach(row => {\n                const cells = row.querySelectorAll('td');\n                if (cells.length >= 3) {\n                    const rowData = [\n                        cells[0].querySelector('.badge')?.textContent || '',  // Namespace\n                        cells[1].querySelector('strong')?.textContent || '',  // Topic Name\n                        cells[2].querySelector('.badge')?.textContent || ''   // Partitions\n                    ];\n                    csv += rowData.map(field => `\"${field.replace(/\"/g, '\"\"')}\"`).join(',') + '\\n';\n                }\n            });\n            \n            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n            const link = document.createElement('a');\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', 'topics.csv');\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n\n        // Add click event listeners to topic rows\n        document.addEventListener('DOMContentLoaded', function() {\n            document.querySelectorAll('.topic-row').forEach(row => {\n                row.addEventListener('click', function() {\n                    const topicName = this.getAttribute('data-topic-name');\n                    toggleTopicDetails(topicName);\n                });\n            });\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
